#!/usr/bin/env node

var app = require("../app");
var debug = require("debug")("jewelry:server");
var http = require("http");
var { Server } = require("socket.io");

var port = normalizePort(process.env.PORT || "4000");
app.set("port", port);

var server = http.createServer(app);

var io = new Server(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"],
    credentials: true,
  },
});

const ADMIN_ROOM = "adminRoom"; // Phòng chung cho admin

io.on("connection", (socket) => {
  console.log("A user connected:", socket.id);

  // Admin tham gia phòng chung
  socket.on("joinAdmin", () => {
    socket.join(ADMIN_ROOM);
    console.log(`${socket.id} joined admin room`);
  });

  // User hoặc admin tham gia phòng riêng
  socket.on("joinRoom", (room) => {
    socket.join(room);
    console.log(`${socket.id} joined room: ${room}`);
  });

  socket.on("sendMessage", (data) => {
    const { sender, text, userName, room } = data;
    console.log(`Message from ${userName} (${sender}) in room ${room}: ${text}`);

    // Gửi tin nhắn đến phòng của user
    io.to(room).emit("receiveMessage", { sender, text, userName });

    // Nếu sender là user, gửi tin nhắn đến phòng admin
    if (sender === "user") {
      io.to(ADMIN_ROOM).emit("receiveMessage", { sender, text, userName });
    }
  });

  socket.on("disconnect", () => {
    console.log("User disconnected:", socket.id);
  });
});

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== "listen") throw error;
  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}